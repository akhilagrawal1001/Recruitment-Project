# -*- coding: utf-8 -*-
"""Click_vs_nonClick.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MBckX0VVFB25RXm4TpHylUFpL6oaCZNb
"""

import tensorflow as tf
from tensorflow import keras
import os
import shutil
import string
import re
from keras import layers
from keras.layers.experimental.preprocessing import TextVectorization
import random

list1 = []
with open('/content/click.txt','r+') as file:
    for line in file:
        if not line.isspace():
            list1.append([line, 0])
            

with open('/content/non_click.txt','r+') as file:
    for line in file:
        if not line.isspace():
            list1.append([line, 1])

random.shuffle(list1)
list2 = []
list3 = []

for i in range(len(list1)):
  list2.append(list1[i][0])
  list3.append(list1[i][1])

texts = tf.constant(list2)
labels = tf.constant(list3)

lab_dataset = tf.data.Dataset.from_tensor_slices((texts, labels))
lab_dataset = lab_dataset.batch(32)

def custom(input_data):
  lower = tf.strings.lower(input_data)

  lower = tf.strings.regex_replace(lower, '\n', ' ')
  lower = tf.strings.regex_replace(lower, '[%s]' % re.escape(string.punctuation), '')
  return lower

vector_layer = TextVectorization(
    standardize = custom,
    max_tokens = 10000,
    output_sequence_length = 250
)

data_text = lab_dataset.map(lambda x, y : x)
vector_layer.adapt(data_text)

# to expand dimension(inp format ke acc kaam  ho) and attach label with text
def vectorize_text(text, label):
  text = tf.expand_dims(text, -1)
  return vector_layer(text), label

ready_train = lab_dataset.map(vectorize_text)

AUTOTUNE = tf.data.AUTOTUNE

ready_train = ready_train.cache().prefetch(buffer_size=AUTOTUNE)

model = keras.models.Sequential([
  keras.layers.Embedding(10001, 64),
  keras.layers.Dropout(0.2),
  keras.layers.GlobalAveragePooling1D(),
  keras.layers.Dropout(0.2),
  keras.layers.Dense(16, activation='relu'),
  keras.layers.Dense(1, activation='relu'),
])

model.summary()

model.compile(optimizer='adam', loss='binary_crossentropy',  metrics=['accuracy'])

model.fit(ready_train, epochs=10)

export_model = keras.models.Sequential([
  vector_layer,
  model 
])

export_model.compile(optimizer='adam' , loss= 'binary_crossentropy', metrics=['accuracy'])

ans = export_model.predict(['hello there you killed someone?'])

if ans < 0.5:
  print("You entered a text that is clickbait")
else:
  print("You entered a text that is non-clickbait")